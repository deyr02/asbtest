{"version":3,"sources":["app/layout/LoadingComponent.tsx","app/api/agent.ts","app/models/creditCard.tsx","app/stores/creditCardStore.ts","app/stores/store.ts","app/stores/navStore.ts","features/creditCard/CardSearch.tsx","features/creditCard/CreditCardList.tsx","features/creditCard/CreditCardMain.tsx","features/errors/NotFound.tsx","features/creditCardDetials/CreditCardDetails.tsx","features/register/RegisterForm.tsx","features/register/RegisterHeader.tsx","features/register/Register.tsx","app/layout/MenuOption.tsx","app/layout/NavBar.tsx","app/layout/App.tsx","reportWebVitals.ts","index.tsx"],"names":["observer","inverted","content","Dimmer","active","Loader","axios","defaults","baseURL","process","interceptors","response","use","a","error","data","status","config","method","errors","hasOwnProperty","modalStateErrors","key","push","flat","toast","history","Promise","reject","responseBody","requests","url","get","then","body","post","agent","CreditCards","list","details","cardNumber","create","creditcard","CreditCard","init","Object","assign","this","CreditCardStore","creditCardRegistry","selectedCreditCard","loadingInitial","userName","setUserName","name","createCreditCard","card","loadCards","runInAction","console","log","setLodingInitial","state","loadSelectedCreditCard","undefined","setCreditCard","creditCard","makeAutoObservable","store","navStore","isMenuVisiable","navTitle","toggleMenu","title","setIsVisible","setTittle","creditCardStore","StoreContext","createContext","useStore","useContext","CardSearch","useHistory","validationSchema","Yup","required","typeError","initialValues","onSubmit","values","handleSubmit","isSubmitting","isValid","dirty","autoComplete","FormField","className","placeholder","Icon","circular","link","onClick","type","render","Label","basic","color","List","divided","animated","verticalAlign","getCreditCardRegistry","map","Item","Content","floated","Button","as","Link","to","size","Description","id","useEffect","Segment","NotFound","Header","icon","Inline","secondary","cardnumber","useParams","getSelectedCreditCard","clearing","textAlign","dividing","Table","celled","striped","selectable","Row","HeaderCell","colSpan","Body","Cell","collapsing","cvc","expiry","timeOut","max","matches","enableReinitialize","validateOnChange","actions","date","split","Date","toDateString","uuid","parseInt","setTimeout","setSubmitting","resetForm","catch","setErrors","clearTimeout","Form","onChange","e","target","value","disabled","loading","positive","FirstName","length","substring","Register","Menu","fixed","Container","App","exact","path","component","CreditCardMain","CreditCardDetails","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.fbab22c3.chunk.js","sourcesContent":["\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default observer( function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n})","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { CreditCard } from \"../models/creditCard\";\r\nimport { history } from '../..';\r\n\r\n\r\nconst sleep = (delay:number)=>{\r\n    return new Promise((resolve)=>{\r\n        setTimeout( resolve, delay);\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\n// axios.interceptors.response.use(async response =>{\r\n//     try{\r\n//         await sleep(1000);\r\n//         return response;\r\n//     }catch(error){\r\n//         console.log(error);\r\n//         return await Promise.reject(error);\r\n//     }\r\n// })\r\n\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n  \r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n               // history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        \r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n       \r\n        case 404:\r\n             history.push('/not-found');\r\n            break;\r\n       \r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\n  const responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\nconst requests = {\r\n    get:<T>(url:string)=> axios.get<T>(url).then(responseBody),\r\n    post:<T>(url:string, body:{})=> axios.post<T> (url, body).then(responseBody)\r\n}\r\n\r\nconst CreditCards = {\r\n    list: () => requests.get<CreditCard[]>('/creditcard'),\r\n    details: (cardNumber: Number)=> requests.get<CreditCard>(`/creditcard/${cardNumber}`),\r\n    create: (creditcard: {}) => requests.post<void>('/creditcard', creditcard)\r\n}\r\n\r\nconst agent = {CreditCards}\r\nexport default agent;","export interface CreditCard{\r\n    id:string;\r\n    name: string;\r\n    cardNumber: number;\r\n    cvc:number;\r\n    expiry:Date;\r\n}\r\n\r\nexport class CreditCardFormValues{\r\n    id?:string = undefined;\r\n    name:string|null = null;\r\n    cardNumber: Number| null = null;\r\n    cvc:Number|null = null;\r\n    expiry:Date|null = null;\r\n\r\n    constructor(creditCard?: CreditCardFormValues){\r\n        if(creditCard){\r\n            this.id = creditCard.id;\r\n            this.name = creditCard.name;\r\n            this.cardNumber = creditCard.cardNumber;\r\n            this.cvc = creditCard.cvc;\r\n            this.expiry = creditCard.expiry;\r\n        }\r\n    }\r\n}\r\n\r\nexport class CreditCard implements CreditCard{\r\n    constructor(init?: CreditCardFormValues){\r\n        Object.assign(this, init);\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { CreditCard } from \"../models/creditCard\";\r\nexport default class CreditCardStore{\r\n    creditCardRegistry:CreditCard[] = [];\r\n    selectedCreditCard?:CreditCard = new  CreditCard();\r\n    loadingInitial = false;\r\n     userName = '';\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n     \r\n    }\r\n    setUserName = (name:string) => this.userName = name;\r\n\r\n\r\n    createCreditCard = async (card:{})=>{\r\n        try{\r\n            await agent.CreditCards.create(card);\r\n           \r\n                     \r\n        }\r\n        catch(error){\r\n            throw error;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    loadCards = async()=> {\r\n        this.loadingInitial = true;\r\n        try{\r\n            await agent.CreditCards.list().then(response => {\r\n                runInAction(()=>{\r\n                     this.creditCardRegistry = response;\r\n                     this.loadingInitial = false;\r\n                })\r\n               \r\n            });\r\n            \r\n        }\r\n        catch(error){\r\n            console.log(error);\r\n               runInAction(()=> this.loadingInitial=false);\r\n        }\r\n    }\r\n\r\n\r\n    setLodingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    get getCreditCardRegistry(){\r\n        return this.creditCardRegistry;\r\n    }\r\n\r\n    loadSelectedCreditCard= async (cardNumber:any)=> {\r\n        this.loadingInitial = true;\r\n        this.selectedCreditCard = undefined;\r\n        try{\r\n             await agent.CreditCards.details(cardNumber).then(response =>{\r\n                runInAction(()=>{\r\n                    this.selectedCreditCard = response;\r\n                    this.loadingInitial = false;\r\n                   \r\n                    })\r\n              \r\n            })\r\n        }\r\n        catch(error){\r\n            //  history.push('/not-found');\r\n            //  window.location.reload();\r\n            runInAction(()=> this.loadingInitial=false);\r\n\r\n            console.log(error)\r\n        }\r\n       \r\n    }\r\n   get getSelectedCreditCard(){return this.selectedCreditCard}\r\n\r\n\r\n\r\n    private setCreditCard = (creditCard: CreditCard)=>{\r\n        this.creditCardRegistry.push(creditCard);\r\n\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport CreditCardStore from \"./creditCardStore\";\r\nimport NavStore from \"./navStore\";\r\n\r\ninterface Store {\r\n    navStore : NavStore;\r\n    creditCardStore: CreditCardStore;\r\n}\r\n\r\nexport const store:Store={\r\n    navStore: new NavStore(),\r\n    creditCardStore: new CreditCardStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\n\r\nexport default class NavStore{\r\n    isMenuVisiable = false;\r\n    navTitle = 'Register Card Form';\r\n   \r\n\r\n    constructor(){\r\n       makeAutoObservable(this)\r\n    }\r\n\r\n    toggleMenu = (title:string)=> {\r\n        runInAction(()=>{\r\n        this.setIsVisible();\r\n        this.setTittle(title);\r\n        })\r\n        \r\n    }\r\n\r\n    setIsVisible() {this.isMenuVisiable = !this.isMenuVisiable;}\r\n     setTittle(title:string) {this.navTitle = title;}\r\n\r\n    \r\n    \r\n\r\n}","import { ErrorMessage, Field, Form, Formik } from 'formik';\r\nimport {  FormField, Icon, Label } from 'semantic-ui-react';\r\nimport * as Yup from 'yup';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nexport default function CardSearch(){\r\n    const history = useHistory();\r\n    const validationSchema = Yup.object({\r\n        cardNumber:Yup.number().required(\"Please Input Card Number\").typeError(\"Card Number must be a number\")\r\n    })\r\n    return(\r\n        <Formik\r\n            initialValues = {{cardNumber: ''}}\r\n            validationSchema = {validationSchema}\r\n            onSubmit ={ (values)=> {history.push(`/carddetails/${values.cardNumber}`)}}\r\n        \r\n        >\r\n            {({handleSubmit, isSubmitting, isValid, dirty})=>(\r\n\r\n                <Form onSubmit={handleSubmit} autoComplete = \"off\" >\r\n                    <FormField className=\"search-box\">\r\n                         <Field  name=\"cardNumber\" className= \"search-input\" placeholder='Search By CardNumber..'/>\r\n                         <Icon className=\"search-box-icon\" name='search'  circular link onClick={handleSubmit}  type='submit'/>\r\n                    </FormField>\r\n                   \r\n                     <ErrorMessage\r\n                            name = \"cardNumber\"\r\n                            render= {error => <Label basic color='red' content= {error}/>}\r\n                          />\r\n                </Form>\r\n            )}\r\n           \r\n        </Formik>\r\n      \r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, List } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer( function CreditCardList(){\r\n    const {creditCardStore} = useStore();\r\n    return(\r\n        <List  divided  animated verticalAlign='middle'>\r\n           \r\n           {creditCardStore.getCreditCardRegistry.map( card =>(\r\n               <List.Item className='card-item' key={card.id}>\r\n            <List.Content  floated='right' >\r\n                <Button className=\"view-button\" as={Link} to={`/carddetails/${card.cardNumber}`}>View</Button>\r\n            </List.Content>\r\n               <List.Icon name=\"credit card\" className=\"credit-card-icon\" size=\"huge\" verticalAlign='middle'/>\r\n                <List.Content>\r\n                    <List.Content className=\"card-info\"   as='a'>CardNumber: {card.cardNumber}</List.Content>\r\n                    <List.Description className ='card-info' as ='a'>Name: {card.name}</List.Description>\r\n                </List.Content>\r\n            </List.Item>\r\n           ))}        \r\n        </List>\r\n        \r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport CardSearch from './CardSearch';\r\nimport CreditCardList from './CreditCardList';\r\n\r\nexport default observer( function CreditCards(){\r\n    const {creditCardStore, navStore} = useStore();\r\n\r\n    useEffect(()=>{\r\n        creditCardStore.loadCards();\r\n        navStore.setTittle(\"Credit Card List\")\r\n    }, [creditCardStore, navStore]);\r\n    \r\n    return(\r\n            <>\r\n                {creditCardStore.loadingInitial ? (<LoadingComponent/>):(\r\n\r\n                    <Segment>\r\n                     <CardSearch/>\r\n                     <CreditCardList/>\r\n                    </Segment>\r\n                )}\r\n                \r\n            </>\r\n           \r\n\r\n    )\r\n})","import React  from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\nexport default function NotFound() {\r\n    \r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/list' secondary>\r\n                    Return to Card List\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { Link, useParams } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment, Table } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport NotFound from '../errors/NotFound';\r\n\r\nexport default observer( function CreditCardDetails(){\r\n    const{creditCardStore, navStore}= useStore();\r\n    const {cardnumber} = useParams<{cardnumber:string}>();\r\n\r\n\r\n    useEffect(()=>{\r\n        creditCardStore.loadSelectedCreditCard(cardnumber);\r\n        navStore.setTittle( \"Card-detatils\");\r\n      \r\n    },[creditCardStore, navStore, cardnumber]);\r\n\r\n    return(\r\n\r\n        <>\r\n        {creditCardStore.loadingInitial ? (<LoadingComponent/>):(\r\n            creditCardStore.getSelectedCreditCard?.id === undefined ? (<NotFound/>):(\r\n            <Segment clearing>\r\n            <Header className=\"detail-header\" textAlign='center' size='huge'  dividing> <Icon name='credit card' /> Card Detils</Header>\r\n\r\n            <Table celled inverted striped selectable>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell textAlign='center'  colSpan=\"2\">Credentials</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                            <Table.Cell collapsing>Card Number</Table.Cell>\r\n                            <Table.Cell>{creditCardStore.getSelectedCreditCard?.cardNumber}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                            <Table.Cell collapsing>Name on Card</Table.Cell>\r\n                            <Table.Cell>{creditCardStore.getSelectedCreditCard?.name}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                            <Table.Cell collapsing>CVC</Table.Cell>\r\n                            <Table.Cell>{creditCardStore.getSelectedCreditCard?.cvc}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                            <Table.Cell collapsing>Expiry</Table.Cell>\r\n                            <Table.Cell>{creditCardStore.getSelectedCreditCard?.expiry}</Table.Cell>\r\n                    </Table.Row>\r\n\r\n                </Table.Body>\r\n\r\n\r\n            </Table>\r\n                <Button as={Link} to='/list'  content='Back to Card List' secondary floated=\"right\"></Button>\r\n\r\n        </Segment>)\r\n        )}\r\n        </>  \r\n    )\r\n})\r\n\r\n\r\n","import { ErrorMessage, Field, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { ChangeEvent } from 'react';\r\nimport { Button, Form, FormField, Label, Segment } from 'semantic-ui-react';\r\nimport * as Yup from \"yup\";\r\nimport { useStore } from '../../app/stores/store';\r\nimport {v4 as uuid} from 'uuid';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default observer( function RegisterForm(){\r\n    const {creditCardStore } = useStore();\r\n    const history = useHistory();\r\n    let timeOut:any = undefined;\r\n    \r\n    const validationSchema = Yup.object({\r\n        name: Yup.string()\r\n            .max(50, \"Name should be below 50 characters.\")\r\n            .required(\"Please input the Name on Card\"),\r\n        cardNumber: Yup.number()\r\n            .typeError(\"Card Number must be a number\")\r\n            .required(\"Please input card Number.\"),\r\n        cvc:Yup.number()\r\n            .typeError(\"CVC must be a number\")\r\n            .required(\"Please Input CVC number.\"),\r\n        expiry:Yup.string()\r\n            . required(\"Please input the expiry date.\")\r\n            .matches(/^(0?[1-9]|1[012])\\/([2-9][0-9)]{3})$/, \"Please input expiry date as MM/YYYY format\")\r\n\r\n    });\r\n\r\n    \r\n    \r\n\r\n\r\n     return(\r\n        <Segment clearing>\r\n            <Formik\r\n                validationSchema = {validationSchema}\r\n                enableReinitialize= {true}\r\n                //The intial values for each field keep as string to show the placeholder value in the input box\r\n                initialValues={{id:'', name: '', cardNumber: '' , cvc:'', expiry: ''}}\r\n                validateOnChange\r\n            \r\n                \r\n                onSubmit =  {(values, actions, ) =>{\r\n                    \r\n                     const date = values.expiry.split('/');\r\n                        values.expiry = new Date(date[0]+\"/28/\"+date[1]).toDateString();\r\n                        values.id = uuid();\r\n                         console.log(values);\r\n                         creditCardStore.createCreditCard({id:values.id, name: values.name, \r\n                            cardNumber: parseInt(values.cardNumber) , cvc:parseInt(values.cvc), expiry:new Date(values.expiry)})\r\n                           .then(()=>{\r\n                                timeOut = setTimeout(() => {\r\n                                    actions.setSubmitting(false);\r\n                                    actions.resetForm();\r\n                                    history.push(`/carddetails/${values.cardNumber}`);\r\n                                }, 5000);\r\n                            })\r\n                            .catch(error => {\r\n                                values.expiry= date[0] + \"/\"+ date[1];\r\n                                actions.setErrors({cardNumber: error.response.data});\r\n                                 actions.setSubmitting(false);\r\n                                 clearTimeout(timeOut)\r\n                            }\r\n                        );\r\n                }\r\n            }\r\n            >\r\n                {({handleSubmit, isValid, isSubmitting, errors, dirty})=>(\r\n                    <Form \r\n                    onChange = {(e:ChangeEvent<HTMLInputElement> )=>e.target.name === \"name\"? creditCardStore.setUserName(e.target.value): void(0) }\r\n                     className='ui form' \r\n                     onSubmit={handleSubmit}  \r\n                     autoComplete='off' >\r\n                        \r\n                      <FormField>\r\n                          <Field  placeholder = \"Name on Card\" name = \"name\"   />\r\n                          <ErrorMessage\r\n                            name = \"name\"\r\n                            render= {error => <Label basic color='red' content= {error}/>}\r\n                          />\r\n                      </FormField>\r\n                      <FormField>\r\n                          <Field  placeholder = \"Card Number\" name = \"cardNumber\"  />\r\n                          <ErrorMessage\r\n                            name = \"cardNumber\"\r\n                            render= {error => <Label basic color='red' content= {error}/>}\r\n                          />\r\n                      </FormField>\r\n                      <div className='form-seperator'>\r\n                            <FormField>\r\n                                <Field  placeholder = \"CVC\" name = \"cvc\"  />\r\n                                <ErrorMessage\r\n                                    name = \"cvc\"\r\n                                    render= {error => <Label basic color='red' content= {error}/>}\r\n                                />\r\n                            </FormField>\r\n                            <FormField>\r\n                                <Field  placeholder = \"Expiry (MM/YYYY)\" name = \"expiry\" />\r\n                                <ErrorMessage\r\n                                    name = \"expiry\"\r\n                                    render= {error => <Label basic color='red' content= {error}/>}\r\n                                />\r\n                            </FormField>\r\n                        </div>\r\n                        <Button\r\n                            disabled = {isSubmitting ||!dirty ||!isValid}\r\n                            loading={isSubmitting} floated=\"right\"\r\n                            positive type='submit' content= \"Submit\"\r\n                        />\r\n                    </Form>\r\n                )}\r\n\r\n            </Formik>\r\n            \r\n        </Segment>\r\n    );\r\n})\r\n\r\n\r\n","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\ninterface Props {\r\n    FirstName:string;\r\n}\r\n\r\nexport default observer( function RegisterHeader({FirstName}:Props){\r\n        const {creditCardStore} = useStore();\r\n    return(\r\n        <Header size=\"huge\" as='h2' textAlign='center' >\r\n           Welcome! {creditCardStore.userName.length > 15? creditCardStore.userName.substring(0, 15)+\".....\": creditCardStore.userName}\r\n        </Header>\r\n    )\r\n\r\n})","import * as React from 'react';\r\nimport RegisterForm from './RegisterForm';\r\nimport RegisterHeader from './RegisterHeader';\r\nexport default function Register(){\r\n    return(\r\n        <>\r\n            <RegisterHeader FirstName=\"Rajib\"/>\r\n            <RegisterForm/>\r\n        </>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer( function MenuOption(){\r\n    const {navStore} = useStore();\r\n    return(\r\n        <List size='large' link>\r\n            <List.Item as={Link} to={'/'} onClick={()=> navStore.toggleMenu('RegisterCardForm')}  active>Register Card</List.Item>\r\n            <List.Item as={Link} to = {\"/list\"} onClick={()=> navStore.toggleMenu('Credit Card List')}  >Credit Card List</List.Item>\r\n        </List>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport * as React from 'react';\r\nimport { Container, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\nimport MenuOption from './MenuOption';\r\n\r\nexport default observer( function NavBar(){\r\n    const {navStore} = useStore();\r\n    return(\r\n      <>\r\n        <Menu fixed='top' floated >\r\n            <Container>\r\n               {!navStore.isMenuVisiable &&\r\n                 <Menu.Item as=\"h2\" > \r\n                    <i onClick= {()=>navStore.toggleMenu('Menu')}  className=\"bars icon\"></i> \r\n                    <span className = \"center-text\"> {navStore.navTitle}</span>\r\n                 </Menu.Item>}\r\n               {navStore.isMenuVisiable &&\r\n                 <Menu.Item as=\"h2\" > \r\n                    <i onClick ={()=>navStore.toggleMenu(\"Register Card Form\")}  className=\"arrow left icon\"></i> \r\n                    <span className = \"center-text\">{navStore.navTitle}</span>\r\n                 </Menu.Item>}\r\n            </Container>\r\n        </Menu>\r\n\r\n        {navStore.isMenuVisiable &&        \r\n        <Container   className ='menu-options'>\r\n              <MenuOption/>\r\n        </Container>}\r\n\r\n        \r\n        </>\r\n    );\r\n})","import { Route, Switch } from 'react-router-dom';\nimport { Container } from 'semantic-ui-react';\nimport CreditCardMain from '../../features/creditCard/CreditCardMain';\nimport CreditCardDetails from '../../features/creditCardDetials/CreditCardDetails';\nimport NotFound from '../../features/errors/NotFound';\nimport Register from '../../features/register/Register';\nimport NavBar from './NavBar';\n\n\nfunction App() {\n  return (\n    <>\n    <NavBar></NavBar>\n      <Container className='main-container'>\n      \n          <Route exact path='/' component={Register} />\n           <Switch>\n                  <Route exact path='/list' component={CreditCardMain} />\n                  <Route exact path='/carddetails/:cardnumber' component={CreditCardDetails} />\n                  <Route exact path='/not-found'  component={NotFound}/>\n          </Switch>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport './app/layout/style.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { BrowserRouter } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <StoreContext.Provider value = {store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </StoreContext.Provider>\n   ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}